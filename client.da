import sys
import random
olympus = import_da('olympus')
config = import_da('read_config_file')

client_properties = {}

operations_dict = {
					0: 'put(\'message\', \'hello\')',
					1: 'get(\'message\')',
					2: 'slice(\'message\', \'1:5\')',
					3: 'append(\'message\', \', world\')'
				}

def read_properties():
	config.read_config_file()
	return config.get_client_properties()


def pseudorandom(seed_value, number):
	client_workload = []
	random.seed(seed_value)
	operations = [random.randint(0,3) for index in range(0, number)]

	for index in range(0, len(operations)):
		client_workload.append(operations_dict[operations[index]])
	return client_workload


def get_workload(workload):
	client_workload = []
	for index in range(0, len(workload)):
		if workload[index].startswith('pseudorandom'):
			function = workload[index]
			args = (function)[function.find('(') + 1:function.find(')')]
			values = args.split(',')

			client_workload.append(pseudorandom(int(values[0].strip()), int(values[1].strip())))
		else:
			client_workload.append([operation.strip() for operation in workload[index].split(';')])
	return client_workload


class Client(process):
	def setup(time:int, id: int, olympus:olympus.Olympus):
		output('Client', id, ':setup')
		self.configuration = {}

		#read workload from config file and get workload for client id
		#this will happen for every client
		#read file only once and get from there, later
		client_properties = read_properties()
		self.client_workload = []
		client_workload = get_workload(client_properties['workload'])[0]
		output('Workload being sent from Client', id, ':', client_workload)


	def run():
		output('Client', id, ': running')
		
		#get the current configuration from Olympus
		output('Client', id, ':requesting configuration from Olympus')
		send(('GetConfiguration', id), to=olympus)
		await(some(received(('Configuration', configuration,))))

		#for all operations in this client's workload, send requests to head
		for operation in client_workload:
			send(('ClientRequest', operation), to=configuration['head'])
			await(some(received(('ResultShuttle', result_shuttle))))
			#figure out and add timeout here


	def receive(msg=('Configuration', config), from_=olympus):
		configuration = config
		output('Client', id, ':received configuration from Olympus')


	def receive(msg=('ResultShuttle', result_shuttle), from_=tail):
		output("received result shuttle", result_shuttle)

