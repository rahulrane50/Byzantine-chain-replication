import sys
import random
import nacl.hash
import nacl.encoding
import nacl.signing
import pickle
import copy
import time
from nacl.bindings.utils import sodium_memcmp
from nacl.public import PrivateKey, Box

olympus = import_da('olympus')
config_file = import_da('read_config_file')
sign = import_da('sign')
operations = import_da('operations')
config(clock is lamport)

#client_properties = {}

operations_dict = {
                    0: 'put(\'message\', \'hello\')',
                    1: 'get(\'message\')',
                    2: 'slice(\'message\', \'1:5\')',
                    3: 'append(\'message\', \', world\')'
                }
expected_dict = {}
requests_info = {}

def read_properties():
    config_file.read_config_file()
    return config_file.get_client_properties()


def pseudorandom(seed_value, number):
    client_workload = []
    random.seed(seed_value)
    operations = [random.randint(0,3) for index in range(0, number)]

    for index in range(0, len(operations)):
        client_workload.append(operations_dict[operations[index]])
    return client_workload


def get_workload(workload):
    client_workload = []
    for index in range(0, len(workload)):
        if workload[index].startswith('pseudorandom'):
            function = workload[index]
            args = (function)[function.find('(') + 1:function.find(')')]
            values = args.split(',')

            client_workload.append(pseudorandom(int(values[0].strip()), int(values[1].strip())))
        else:
            client_workload.append([operation.strip() for operation in workload[index].split(';')])
    return client_workload


def verify_result_statement(verify_key, statement, hashed_result):
    verified = True
    result_statement = None
    verified_result_statement = sign.verify_sign(verify_key, statement)
    #print("verified_result_statement :", verified_result_statement)
    if verified_result_statement == None:
        verified = False
        return verified, None
    if verified:
        result_statement = pickle.loads(verified_result_statement)
    if not sodium_memcmp(hashed_result, result_statement.result_hash):
        verified = False
    return verified, result_statement


def verify_expected_result(id, expected_dict):
    verified = True
    fname = "testcase_" + str(id) + "_result.txt"
    testing_file = open(fname, "rb")
    actual_dict = pickle.load(testing_file)
    if (set(actual_dict.keys()) != set(expected_dict.keys())):
        verified = False
    
    for key, val in actual_dict.items():
        try:
            if expected_dict[key] != val:
                print("Actual result [%s] not matching with expected result [%s]"%(val, expected_dict[key]))
                verified = False
                break
        except KeyError:
            print('The key', key, 'was not found in the dictionary')
    return verified


def check_timeout(client_timeout):
    for key, val in requests_info.items():
        if((time.time() - val) >= client_timeout):
            requests_info[key] = time.time()
            return True, key[1]
    return False, None


class Client(process):
    def setup(client_timeout:int, id: int, olympus:olympus.Olympus):
        output('Client', id, ': setup')
        self.configuration = {}
        self.public_key_map = {}
        self.priv_key = None
        self.sequence_number = 0
        self.results = []
        self.verify_key_hex_map = {}
        self.signing_key = None
        self.sent = {}
        #read workload from config file and get workload for client id
        #this will happen for every client
        #read file only once and get from there, later
        self.client_properties = read_properties()
        #self.client_workload = []
        self.testing_scenarios = config_file.get_testing_file()

    def run():
        output('Client', id, ': running')
        
        #get the current configuration from Olympus
        output('Client', id, ':requesting configuration from Olympus')
        send(('GetConfiguration', id), to=olympus)
        await(some(received(('Configuration', configuration,))))

        send(('GetKeys', id), to=olympus)
        await(some(received(('Keys', public_key_map, priv_key,))))

        send(('GetSigningKeys', id), to=olympus)
        await(some(received(('SigningKeys', key, key_map))))


        #for all operations in this client's workload, send requests to head
        client_box = Box(priv_key, public_key_map['head'])
        global expected_dict
        for key, val in testing_scenarios.items():
            output("Testcase :", key)
            output("Description :", val["Description"])
            output("Expected results :", val["Expected Results"])
            perform_op = True
            if val.get("expected_dict"):
                output("Expected dict :", val["expected_dict"])
                perform_op = False
                expected_dict = val["expected_dict"]
            if val.get('workload'):
                client_workload = get_workload(val["workload"])[0]
            else:
                client_workload = get_workload(client_properties['workload'])[0]
            output("client workload :", client_workload)
            for operation in client_workload:
                signed_operation = sign.sign_msg(signing_key, operation)
                encrypted_operation, operation_hex = sign.encrypt_msg(signed_operation, client_box)
                retransmit_req = False
                retransmit=val.get("retransmit_request")
                if retransmit:
                    if id == retransmit[0] and sequence_number == retransmit[1]:
                        retransmit_req = True    
                send(('ClientRequest', encrypted_operation, operation_hex, sequence_number, id, retransmit_req,), to=configuration['config_0']['head'])
                requests_info[(id, sequence_number)] = time.time()
                sequence_number += 1
                if perform_op:
                    result = operations.perform_operation(operation, expected_dict)
            
            if await(check_timeout(client_timeout)[0] or (len(listof(tail, received(('Result', result_proof, result, identifier, operation,), from_=tail))) == len(client_workload))):
                timed_out, seqno = check_timeout(client_timeout)
                if timed_out:
                    output("Operation having seqno ",seqno, " timed out hence retransmitting")
                    retransmit_request(operation, seqno)
                else:
                    output('result received')
            elif timeout(client_timeout):
                output('Client', id, ': timed out waiting for result, resending request')
                retransmit_request(operation, seqno)
 

            verified = verify_expected_result(id, expected_dict)
            if verified: 
                output("Actual result matching with expected result")
            else:
                output("Actual result not macthing with expected result")

    def synchronous_operations():
        for operation in client_workload:
            clk = logical_clock()
            signed_operation = sign.sign_msg(signing_key, operation)
            encrypted_operation, operation_hex = sign.encrypt_msg(signed_operation, client_box)
            send(('ClientRequest', encrypted_operation, operation_hex, sequence_number, id), to=configuration['config_0']['head'])
            sequence_number += 1

            if await(some(received(('Result', result_proof, result, identifier,), clk=rclk), has=(rclk > clk))):
                output('Client', id, ': received result')
            elif timeout(client_timeout):
                output('Client', id, ': timed out waiting for result, resending request')


    def receive(msg=('Configuration', config), from_=olympus):
        configuration = config
        output('Client', id, ':received  configuration from Olympus', configuration)
    

    def receive(msg=('Result', result_proof, result, identifier, operation,), from_=tail):
        output('Client', id,'received result shuttle', result_proof, result)
        if len(identifier.split('_')) == 3 and identifier.split('_')[2] == 'resent':
            output('Client', id,'received result for restransmitted request', identifier.split('_')[1])
        #verify hash
        hashed_result = sign.generate_hash(result.encode('ascii'))
        result_statements = result_proof.statements
        verified = True        
        verified, result_statement = verify_result_statement(verify_key_hex_map['head'], result_statements[0], hashed_result)
        if verified:
            results.append(result)
        
        index = 1
        for statement in result_statements[1:-1]:
            verified, result_statement = verify_result_statement(verify_key_hex_map['replica_'+str(index)], statement, hashed_result)
            if verified:
                results.append(result)
                break
            index += 1
        verified, result_statement = verify_result_statement(verify_key_hex_map['tail'], result_statements[-1], hashed_result)
        if verified:
            results.append(result)

        if verified:
            output('Client',id, ': Result:', result, 'received and verified for operation,', operation)
        else:
            output("Result statement of replica :",  'replica_' + str(index), " is not verified hence retransmitting.")
            retransmit_request(result_statement.operation, identifier.split('_')[1])


    def receive(msg=('RetransmitResult', result_proof, result, identifier, operation,), from_=tail):
        output('Client', id,'received result shuttle', result_proof, result)
        if len(identifier.split('_')) == 3 and identifier.split('_')[2] == 'resent':
            output('Client', id,'received result for restransmitted request', identifier.split('_')[1])
        #verify hash
        hashed_result = sign.generate_hash(result.encode('ascii'))
        result_statements = result_proof.statements
        verified = True        
        verified, result_statement = verify_result_statement(verify_key_hex_map['head'], result_statements[0], hashed_result)
        if verified:
            results.append(result)
        
        index = 1
        for statement in result_statements[1:-1]:
            verified, result_statement = verify_result_statement(verify_key_hex_map['replica_'+str(index)], statement, hashed_result)
            if verified:
                results.append(result)
                break
            index += 1
        verified, result_statement = verify_result_statement(verify_key_hex_map['tail'], result_statements[-1], hashed_result)
        if verified:
            results.append(result)

        if verified:
            output('Client',id, ': Result:', result, 'received and verified for operation,', operation)
        else:
            output("Result statement of replica :",  'replica_' + str(index), " is not verified hence retransmitting.")
            retransmit_request(result_statement.operation, identifier.split('_')[1])


    def receive(msg=('Keys', key_map, key), from_=olympus):
        public_key_map = key_map
        priv_key = key
        output('Client', id, ':received keys from Olympus')


    def receive(msg=('SigningKeys', key, key_map), from_=olympus):
        self.verify_key_hex_map = key_map
        self.signing_key = key

        output('Client', id, ':received signing keys from Olympus')


    def retransmit_request(operation, sequence_number):
        index = 0
        received_result = False
        client_box = Box(priv_key, public_key_map['head'])
        signed_operation = sign.sign_msg(signing_key, operation)
        encrypted_operation, operation_hex = sign.encrypt_msg(signed_operation, client_box)
        send(('ReTransmittedRequest', encrypted_operation, operation_hex, sequence_number, id), to=configuration['config_0']['head'])

        for index in range(1, len(configuration['config_0']) - 1):
            client_box = Box(priv_key, public_key_map['replica_' + str(index)])
            encrypted_operation, operation_hex = sign.encrypt_msg(signed_operation, client_box)          
            send(('ReTransmittedRequest', encrypted_operation, operation_hex, sequence_number, id), to=configuration['config_0']['replica_' + str(index)])
            #sequence_number += 1

        client_box = Box(priv_key, public_key_map['tail'])
        signed_operation = sign.sign_msg(signing_key, operation)
        encrypted_operation, operation_hex = sign.encrypt_msg(signed_operation, client_box)
        send(('ReTransmittedRequest', encrypted_operation, operation_hex, sequence_number, id), to=configuration['config_0']['tail'])

        clk = logical_clock()
        #if await((received(('Result', result_proof, result, identifier, operation,)))):
        # if await(some(received(('RetransmitResult', result_proof, result, identifier, operation,), clk=rclk), has=(rclk > clk))):
        if await(some(received(('RetransmitResult', result_proof, result, identifier, operation,)), has=(identifier == str(id) + '_' + str(sequence_number) + '_' + 'resent'))):
            output('Client', id, ': Result:', result, 'received and verified for retransmitted operation,', operation)
            received_result = True
        elif timeout(client_timeout):
            output('Client', id, ': timed out waiting for result of retransmitted opertion, resending request')
