config = {}
client_properties = {}
olympus_properties = {}
replica_properties = {}


def read_config_file():
	with open('config.csv','r') as f:
	    for line in f:
	        if line[0] != '#':
	          (key,sep,val) = line.partition('=')
	          # if the line does not contain '=', it is invalid and hence ignored
	          if len(sep) != 0:
	              val = val.strip()
	              config[key.strip()] = int(val) if str.isdecimal(val) else val


def separate_properties():

	olympus_properties['t'] = config['t']
	olympus_properties['hosts'] = config['hosts']
	olympus_properties['replica_hosts'] = config['replica_hosts']
	olympus_properties['head_timeout'] = config['head_timeout']
	olympus_properties['nonhead_timeout'] = config['nonhead_timeout']
	
	client_properties['num_client'] = config['num_client']
	client_properties['client_timeout'] = config['client_timeout']
	client_properties['hosts'] = config['hosts']
	client_properties['client_hosts'] = config['client_hosts']
	client_properties['workload'] = []

	for key in config:
		if key.startswith('workload'):
			client_properties['workload'].append(config[key])


def get_client_properties():
	return client_properties


def get_olympus_properties():
	return olympus_properties


read_config_file()
separate_properties()

# print("config :: " + str(config) + "\n\n")
#print("client properties :: " + str(get_client_properties()) + "\n\n")
# print("olympus properties :: " + str(get_olympus_properties()) + "\n\n")
