import sys
replica = import_da('replica')
client  = import_da('client')

class Olympus(process):
    def setup(no_of_replicas:int, num_of_clients:int):
        self.config = {}

    def create_keys():
       pass

    def run():
        #Start and setup new replicas.        
        set_of_replicas = new(replica.Replica, num=no_of_replicas)
        list_of_replicas = list(set_of_replicas)
        
        config['head'] = list_of_replicas[0]
        config['tail'] = list_of_replicas[-1]

        index = 1
        for replica_itr in list_of_replicas[1:-1]:
            config['replica_' + str(index)] = replica_itr
            index += 1

        #setup and start head and tail
        setup(config['head'], (self, config, 'head', ))
        setup(config['tail'], (self, config, 'tail', ))
        start(config['head'])
        start(config['tail'])

        #setup and start intermediate replicas
        for index in range(1, len(config) - 2):
            setup(config['replica_' + str(index)], (self, config, 'replica_' + str(index)))
            start(config['replica_' + str(index)])


        """start clients"""
        clients = new(client.Client, num=num_of_clients)
        setup(clients, (3000, config,))
        start(clients)

        #this await condition is incorrect, will change it later
        #await(len( listof(set_of_replicas, received(('ReplicasUpNow',), from_=set_of_replicas)) ) == 3)

        #Olympus always stays on
        await(False)

    
    def receive(msg=('ReplicasUpNow',), from_=replica):
        #Broadcast msg to all replicas
        anymsg = "This is Olympus!!"
        print("Sending message :", anymsg)
        if(replica == config['head']):
            send(('OlympusRequest', anymsg), to=replica)

def main():
    #Olympus can create all public and private keys for clients and replicas and send them to the relevant processes.
    olympus = new(Olympus, [5, 3], num=1)
    #global_olympus = olympus
    start(olympus)
 
