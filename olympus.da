import sys
import nacl.utils
from nacl.public import PrivateKey, Box
config(channel is fifo, clock is lamport)
replica = import_da('replica')
client  = import_da('client')

def generate_pub_priv_keys():
    priv_key = PrivateKey.generate()
    pub_key = priv_key.public_key
    return (priv_key, pub_key)

class Olympus(process):
    def setup(no_of_replicas:int, num_of_clients:int, set_of_replicas:set):
        self.configuration = {}
        self.public_key_map = {}
        self.priv_key_map = {}

    def create_keys():
        priv_key, pub_key = generate_pub_priv_keys()
        public_key_map['olympus'] = pub_key
        priv_key_map['olympus'] = priv_key
        
        priv_key, pub_key = generate_pub_priv_keys()
        public_key_map['head'] = pub_key
        priv_key_map['head'] = priv_key
 
        priv_key, pub_key = generate_pub_priv_keys()
        public_key_map['tail'] = pub_key
        priv_key_map['tail'] = priv_key
 
        for index in range(1, len(configuration) - 2):
            priv_key, pub_key = generate_pub_priv_keys()
            public_key_map['replica_' + str(index)] = pub_key
            priv_key_map['replica_' + str(index)] = priv_key
 
        priv_key, pub_key = generate_pub_priv_keys()
        public_key_map['client'] = pub_key
        priv_key_map['client'] = priv_key
 
    def run():

        
        """Create configuration of replicas, and start them"""
        configuration = create_replica_config(list(set_of_replicas))
        
        """Create public and private keys for replicas and client."""
        self.create_keys()
       
        setup_and_start_replicas(configuration, public_key_map, priv_key_map)

        #Olympus always stays on
        await(False)
   
    def receive(msg=('GetConfiguration', client_id), from_=client):
        output('Olympus: Sending configuration to client:', client_id)
        send(('Configuration', configuration), to=client)

    def receive(msg=('GetKeys', client_id), from_=client):
        output('Sending keys to client:', client_id)
        send(('Keys', public_key_map, priv_key_map['client']), to=client)

    def receive(msg=('ForwardRequest', operation,), from_=replica):
        #Broadcast msg to all replicas
        anymsg = "This is Olympus!!"
        output("handling forward request msg from replica :", operation)
        if(replica == configuration['head']):
            send(('OlympusRequest', anymsg), to=replica)


    def create_replica_config(list_of_replicas):
        configuration['head'] = list_of_replicas[0]
        configuration['tail'] = list_of_replicas[-1]

        index = 1
        for replica_itr in list_of_replicas[1:-1]:
            configuration['replica_' + str(index)] = replica_itr
            index += 1
        return configuration        


    def setup_and_start_replicas(configuration, public_key_map, priv_key_map):
        #setup and start head and tail
        setup(configuration['head'], (self, configuration, public_key_map, priv_key_map['head'], 'head', ))
        setup(configuration['tail'], (self, configuration, public_key_map, priv_key_map['tail'], 'tail', ))
        start(configuration['head'])
        start(configuration['tail'])

        #setup and start intermediate replicas
        for index in range(1, len(configuration) - 2):
            setup(configuration['replica_' + str(index)], (self, configuration, public_key_map, priv_key_map['replica_'
            + str(index)], 'replica_' + str(index)))
            start(configuration['replica_' + str(index)])    


def main():
    #Olympus can create all public and private keys for clients and replicas and send them to the relevant processes.
    olympus = new(Olympus, [4, 1], num=1)
    start(olympus)
 
