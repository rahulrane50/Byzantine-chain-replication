slot_number = 1

class OrderStatement:
    def __init__(self, type, slot, operation):
        self.operation = operation
        self.slot = slot               


class Proof:
    statements = set()
    def __init__(self, statement, slot, operation):
        self.statements = []
        self.statements.append(statement)
        self.slot = slot
        self.operation = operation
        # self.sequence_number = sequence_number
        # self.client_id = client_id

    def add_statement(self, statement):
        self.statements.append(statement)

    def set_replica(replica_id):
        self.replica = replica_id


class ResultStatement():
    def __init__(self, type, result, hash, operation):
        self.result = result
        self.result_hash = hash
        self.operation = operation


class Shuttle:
    #slot = 0
    def __init__(self, order_proof, sender, receiver, client):
        self.order_proof = order_proof
        self.sender = sender
        self.receiver = receiver
        self.client = client
        self.result_proof = ''
        # Shuttle.slot += 1
        # self.slot_number = slot_number


    def add_result_proof(self, result_proof):
        self.result_proof = result_proof

    def update_sender(self, sender):
        self.sender = sender

class ReconfigurationRequest():
    def __init__(self, configurationID, slot, operation, misbehavingProcessID):
        self.configurationID = configurationID,
        self.slot = slot,
        self.operation = operation, 
        self.misbehavingProcessID = misbehavingProcessID,
       
class WedgeStatement():
    def __init__(self, history, checkpoint_proof, runningState):
        self.history = history
        self.checkpoint_proof = checkpoint_proof
        self.runningState = runningState
