import sys
import nacl.utils
from nacl.public import PrivateKey, Box
config(channel is fifo, clock is lamport)

replica = import_da('replica')
client  = import_da('client')

def generate_pub_priv_keys():
    priv_key = PrivateKey.generate()
    pub_key = priv_key.public_key
    return (priv_key, pub_key)

def generate_sign_key():
    signing_key = nacl.signing.SigningKey.generate()
    verify_key = signing_key.verify_key
    verify_key_hex = verify_key.encode(encoder=nacl.encoding.HexEncoder)
    return signing_key, verify_key_hex

class Olympus(process):
    def setup(no_of_configuration:int, no_of_replicas:int, num_of_clients:int, set_of_replicas:set, head_timeout:int, nonhead_timeout:int):
        self.configuration = {}
        for id in range(0, no_of_configuration):
            self.configuration['config_' + str(id)] = {}
        self.public_key_map = {}
        self.priv_key_map = {}
        self.signing_key_map = {}
        self.verify_key_hex_map = {}

    def create_keys():
        priv_key, pub_key = generate_pub_priv_keys()
        public_key_map['olympus'] = pub_key
        priv_key_map['olympus'] = priv_key
        
        priv_key, pub_key = generate_pub_priv_keys()
        public_key_map['head'] = pub_key
        priv_key_map['head'] = priv_key
 
        priv_key, pub_key = generate_pub_priv_keys()
        public_key_map['tail'] = pub_key
        priv_key_map['tail'] = priv_key
 
        for index in range(1, len(configuration['config_0']) - 1):
            priv_key, pub_key = generate_pub_priv_keys()
            public_key_map['replica_' + str(index)] = pub_key
            priv_key_map['replica_' + str(index)] = priv_key
 
        for index in range(0, num_of_clients):
            priv_key, pub_key = generate_pub_priv_keys()
            public_key_map['client_' + str(index)] = pub_key
            priv_key_map['client_' + str(index)] = priv_key
        #output("public key map :", public_key_map)
        #output("priv key map :", priv_key_map)
        
    def create_signing_keys():
        signing_key_map['olympus'], verify_key_hex_map['olympus'] = generate_sign_key()
        signing_key_map['head'], verify_key_hex_map['head'] = generate_sign_key()
        signing_key_map['tail'], verify_key_hex_map['tail'] = generate_sign_key()
        for index in range(1, len(configuration['config_0']) - 1):
            sign_key, verify_key_hex = generate_sign_key()
            signing_key_map['replica_' + str(index)] = sign_key
            verify_key_hex_map['replica_' + str(index)] = verify_key_hex

        for index in range(0, num_of_clients):
            signing_key_map['client_' + str(index)], verify_key_hex_map['client_' + str(index)] = generate_sign_key()
        #output("signing key map :", signing_key_map)
        #output("verifying key hex map :", verify_key_hex_map)

    def run():
        """Create configuration of replicas, and start them"""
        configuration['config_0'] = create_replica_config(list(set_of_replicas))
        
        """Create public and private keys for replicas and client."""
        self.create_keys()
      
        self.create_signing_keys()

        setup_and_start_replicas(configuration['config_0'], public_key_map, priv_key_map, signing_key_map,
        verify_key_hex_map, head_timeout, nonhead_timeout)

        #Olympus always stays on
        await(False)
   
    def receive(msg=('GetConfiguration', client_id), from_=client):
        output('Olympus: Sending configuration to client:', client_id)
        send(('Configuration', configuration), to=client)

    def receive(msg=('GetKeys', client_id), from_=client):
        output('Sending keys to client:', client_id)
        send(('Keys', public_key_map, priv_key_map['client_'+ str(client_id)]), to=client)

    def receive(msg=('GetSigningKeys', client_id), from_=client):
        output('Sending signing keys to client:', client_id)
        send(('SigningKeys', signing_key_map['client_' + str(client_id)], verify_key_hex_map), to=client)


    def receive(msg=('ForwardRequest', operation,), from_=replica):
        #Broadcast msg to all replicas
        anymsg = "This is Olympus!!"
        output("handling forward request msg from replica :", operation)
        if(replica == configuration['config_0']['head']):
            send(('OlympusRequest', anymsg), to=replica)


    def create_replica_config(list_of_replicas):
        configuration['config_0']['head'] = list_of_replicas[0]
        configuration['config_0']['tail'] = list_of_replicas[-1]

        index = 1
        for replica_itr in list_of_replicas[1:-1]:
            configuration['config_0']['replica_' + str(index)] = replica_itr
            index += 1
        return configuration['config_0']        


    def setup_and_start_replicas(configuration, public_key_map, priv_key_map, signing_key_map, verify_key_hex_map, head_timeout, nonhead_timeout):
        #setup and start head and tail
        setup(configuration['head'], (self, configuration, public_key_map, priv_key_map['head'],
        signing_key_map['head'], verify_key_hex_map, 'head', 'ACTIVE', head_timeout, nonhead_timeout))
        setup(configuration['tail'], (self, configuration, public_key_map, priv_key_map['tail'],
        signing_key_map['tail'], verify_key_hex_map, 'tail', 'ACTIVE', head_timeout, nonhead_timeout))
        start(configuration['head'])
        start(configuration['tail'])

        #setup and start intermediate replicas
        for index in range(1, len(configuration) - 1):
            setup(configuration['replica_' + str(index)], (self, configuration, public_key_map, priv_key_map['replica_'
            + str(index)], signing_key_map['replica_' + str(index)], verify_key_hex_map, 'replica_' + str(index), 'ACTIVE', head_timeout, nonhead_timeout))
            start(configuration['replica_' + str(index)])    


#def main():
    #Olympus can create all public and private keys for clients and replicas and send them to the relevant processes.
    
    # olympus = new(Olympus, [no_of_replicas, num_clients], num=1)
    # start(olympus)
