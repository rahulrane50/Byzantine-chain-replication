from nacl.public import PrivateKey, Box
import nacl.encoding
import nacl.hash
import nacl.signing
import pickle
config(clock is lamport)


olympus    = import_da('olympus')
client     = import_da('client')
messages   = import_da('messages')
operations = import_da('operations')
sign = import_da('sign')
read_config_file = import_da('read_config_file')


#Note: For phase 2 only one configuration is supported
def handle_failure_trigger(replica_id, client_id, sequence_number, failure_scenario_properties, failure_trigger,
config_id='config_0'):
    failure_error = None
    tuple = str(client_id) + ',' + str(sequence_number)
    if replica_id in failure_scenario_properties[config_id].keys():
        for tuples in failure_scenario_properties[config_id][replica_id]:
            if(tuple == tuples[0] and failure_trigger == tuples[1]):
                failure_error = tuples[2]
    return failure_error


def handle_failure_error(failure_error):
    failure_error_dict = {'operation':None, 'result':False, 'drop_result':False}
    if 'change_operation' in failure_error:
        failure_error_dict['operation'] = "get('x')"
    elif 'change_result' in failure_error:
        failure_error_dict['result'] = True
    elif 'drop_result_stmt' in failure_error:
        failure_error_dict['drop_result'] = True
    else:
        print("Unhandled failure error scenario")
    return failure_error_dict
    

class Replica(process):
    #setup replica
    #set the replica id, public and private keys

    def setup(olympus:olympus.Olympus, config:dict, public_key_map:dict, priv_key:PrivateKey,
    signing_key:cl.signing.SigningKey, verify_key_hex_map:dict, replica_id:int, mode:str):
        #output("Replica %s: public_key_map :%s verify_key_hex_map :%s"%(replica_id, public_key_map, verify_key_hex_map))
        self.dictionary = {}
        self.cache = {}
        self.failure_scenario_properties = {}
        self.slot_number = 0
        self.history = []

    #start the replica, it is in continuous wait state
    def run():
        output('Replica:', replica_id,'started in', mode, 'mode')
        failure_scenario_properties = read_config_file.get_failure_scenario_properties() 
        await(False)

    """""""""""""""""""""""""""
        Methods for shuttles
    """""""""""""""""""""""""""
    #replica head: add operation at that slot
    def order_operation(operation, client):
        forward_shuttle = None
        slot_number = slot_number + 1
        #check_history(history, slot, operation)
        verified = check_previous_order_proofs(slot_number, operation)
        if not verified:
            output('Replica Head: detected invalid slot and operation in previous order proofs. Aborting..')
            #TO-DO: make the system move forward still
        else:
            output('Replica', replica_id, ': successfully verified previous order statements')
            order_statement = messages.OrderStatement('order', slot_number, operation)    # <'order', slot, operation>, slot is incremented in the class
            signed_order_statement = sign.sign_msg(signing_key, pickle.dumps(order_statement))
            output('Signed order statement==============', signed_order_statement)
            order_proof = messages.Proof(signed_order_statement, slot_number, operation)
            forward_shuttle = messages.Shuttle(order_proof, 'head', config['replica_1'], client)
            history.append(order_proof)
            output('Replica Head: Added operation', operation, 'at slot', slot_number)
        return forward_shuttle

    #check slots used by older order proofs
    def check_previous_order_proofs(slot_number, operation):
        verified = True
        for order_proof in history:
            # slot_number: new slot number, operation: new incoming operation
            # for each order proof in the history of head
            # order proof will have previous slot and operation
            # if any previous slot equals the new slot, the new slot is wrong
            # all previous slots must be smaller than the current slot
            # the operation at that slot can be same or different
            # checking for same operation at same slot will only happen during execution of a new operation
            # this checking will not be considered from the history
            if order_proof.slot == slot_number or order_proof.slot > slot_number:
                verified = False
                output('Replica', replica_id, 'detected invalid slot and operation')
                break
            else:
                # check only the slot used by order statement said by tail in every order proof
                # since, invalid slots used by any other replica would have been previously detected
                # TO-DO: or a previous replica could have been faulty, and do this checking for all order statements
                # but what if the head is also faulty? For now, do this
                order_statements = order_proof.statements
                result = sign.verify_sign(verify_key_hex_map['tail'], order_statements[len(order_statements) - 1])
                if result.slot > slot_number or result.slot == slot_number:
                    output('Replica', replica_id, 'detected invalid slot and operation')
                    verified = False
                    break
        return verified


    def check_previous_statements(unsigned_order_statements, slot, operation):
        verified = True
        output('in check_previous_statements', slot, operation,'===================================')
        for statement in unsigned_order_statements:
            output('statement in check_previous_statements', statement, '===============================')
            # if not (statement.slot == slot and statement.operation == operation):
            #     output('Replica', replica_id, 'detected invalid slot and operation')
            #     verified = False
            #     break
        return verified


    #add order statement to order proof contained in the forward shuttle
    def add_order_statement(forward_shuttle, operation, replica_index):
        #TO-DO: add verification of all signed statements in the order proof
        #if that passes, do this
        slot_number += 1
        result = verify_signed_order_statements(forward_shuttle.order_proof, replica_index, slot_number, operation)
        output('Replica', replica_id, ': successfully verified previous order statements')
        if result == 'OK':
            order_statement = messages.OrderStatement('order', slot_number, operation)
            signed_order_statement = sign.sign_msg(signing_key, pickle.dumps(order_statement))

            order_proof = forward_shuttle.order_proof            
            order_proof.add_statement(signed_order_statement)
        elif result == 'fail':
            #TO-DO: drop this message, and make the system move forward
            output('Invalid order proof detected at replica', replica_id)


    def verify_signed_order_statements(order_proof, replica_index, slot_number, operation):
        order_statements = order_proof.statements
        index = 0
        unsigned_order_statements = []
        result = sign.verify_sign(verify_key_hex_map['head'], order_statements[index])

        output('verify_signed_order_statements result', result, '==========================================')

        #if result == 'Verification Failed':
        if result == None:
            return 'fail'
        else:
            unsigned_order_statements.append(result)

        map_key = 'replica_'
        for index in range(1, replica_index):
            result = sign.verify_sign(verify_key_hex_map[map_key + str(index)], order_statements[index])

            if result == None:
                return 'fail'
            else:
                output('appending result', result, '==========================================')
                unsigned_order_statements.append(result)

        verified = check_previous_statements(unsigned_order_statements, slot_number, operation)
        if not verified:
            return 'fail'

        return 'OK'

    #create result shuttle, done by the head replica
    def create_result_proof(result, slot, operation):
        hashed_result = sign.generate_hash(result.encode('ascii'))
        result_statement = messages.ResultStatement('result', result, hashed_result, operation)
        
        #TO-DO: sign result statement before adding to proof

        signed_result_statement = sign.sign_msg(signing_key, pickle.dumps(result_statement))
        result_proof = messages.Proof(signed_result_statement)
        return result_proof 



    #add result statement to result proof contained in the result shuttle
    def add_result_statement(shuttle, operation, result, hashed_result):
        #TO-DO: sign result statement before adding to proof
        result_statement = messages.ResultStatement('result', result, hashed_result, operation)
        signed_result_statement = sign.sign_msg(signing_key, pickle.dumps(result_statement))
        result_proof = shuttle.result_proof
        result_proof.add_statement(signed_result_statement)


    #cache result and result shuttle at each replica
    def cache_result(result_shuttle, result, client, sequence_number, client_id):
        cache[str(client_id) + '_' + str(sequence_number)] = (result_shuttle, result)


    """""""""""""""""""""""""""
        Receive Handlers
    """""""""""""""""""""""""""
    #Head Replica
    def receive(msg=('ClientRequest', encrypted_operation, operation_hex, sequence_number, client_id,), from_=client):
        replica_box = Box(priv_key, public_key_map['client'])

        #TO-DO: handle that verification will fail
        #verify that the operation really came from that particular client
        operation = sign.verify_msg(encrypted_operation, replica_box, operation_hex,
        verify_key_hex_map['client_'+str(client_id)])
        output("Replica Head: operation received from client :", operation)

        #Check for failure trigger condition
        failure_error = handle_failure_trigger('replica_0', client_id, sequence_number, failure_scenario_properties,'client_request')
        output("failure_error :", failure_error)
        if failure_error:
            failure_error_dict = handle_failure_error(failure_error)

        if failure_error and failure_error_dict['operation']:
            operation = failure_error_dict['operation']
            output("Injecting failure change operation on head replica")

        #add operation at the next slot
        forward_shuttle = order_operation(operation, client)
        output('Replica:', replica_id, 'orderCommand transition')

        #apply operation to running state and add result proof to forward shuttle
        result = operations.perform_operation(operation, dictionary)
        output('State of dictionary at Head:', dictionary)
        output('Result obtained at Head for operation:', operation,'is: ',result)
        result_proof = create_result_proof(result, slot_number, operation)
        forward_shuttle.add_result_proof(result_proof)

        output('Replica Head: Sequence number', sequence_number)

        #send the forward shuttle, result shuttle to the next replica
        send(('ForwardRequest', forward_shuttle, operation, client, sequence_number, client_id,), to=config['replica_1'])


    def receive(msg=('ResultShuttle', forward_shuttle, result, sequence_number, client_id,), from_=replica):
        output('Replica Head:', replica_id, 'result shuttle received from previous replica :', forward_shuttle)
        if not replica_id == 'head':
            my_index = int(replica_id.split('_')[1])

        #Check for failure trigger condition
        failure_error = handle_failure_trigger(replica_id, client_id, sequence_number, failure_scenario_properties, 'result_shuttle')
        output("failure_error :", failure_error)
        if failure_error:
            failure_error_dict = handle_failure_error(failure_error)

        #TO-DO: add validation of sign on each statement in result shuttle,
        #and verify that result of every replica is equal to this replica

        #cache result and result shuttle
        cache_result(forward_shuttle, result, client, sequence_number, client_id)

        #send result shuttle to head
        if my_index == 1:
            send(('ResultShuttle', forward_shuttle, result), to=config['head'])
        else:
            #send result shuttle to the previous replica
            send(('ResultShuttle', forward_shuttle, result), to=config['replica_' + str(my_index - 1)])
        # #send result shuttle to the previous replica
        # send(('ResultShuttle', forward_shuttle, result, sequence_number, client_id,), to=config['replica_' + str(my_index - 1)])


    #Intermediate replicas
    def receive(msg=('ForwardRequest', forward_shuttle, operation, client, sequence_number, client_id,), from_=replica):
        output('Replica Intermediate:', replica_id, 'shuttle received from previous replica :', forward_shuttle)
        my_index = int(replica_id.split('_')[1])

        #Check for failure trigger condition
        failure_error = handle_failure_trigger(replica_id, client_id, sequence_number, failure_scenario_properties,'forwarded_request')
        output("failure_error :", failure_error)
        if failure_error:
            failure_error_dict = handle_failure_error(failure_error)        

        #TO-DO: check validity of order proof in the shuttle ## done, verifying from within add_order_statement
        output('Adding order statement====================================')
        #we are updating the sender on the shuttle because we want to verify it
        #add order statement to the order proof in the shuttle
        add_order_statement(forward_shuttle, operation, my_index)
        output('Replica:', replica_id, 'orderCommand transition')
        forward_shuttle.update_sender(config['replica_' + str(my_index)])

        #applying operation to running state and add result statement to the result shuttle
        result = operations.perform_operation(operation, dictionary)
        output('State of dictionary at', 'replica_' + str(my_index),':', dictionary)
        add_result_statement(forward_shuttle, operation, result, sign.generate_hash(result.encode('ascii')))

        #send both shuttles to next replica
        if  my_index == len(config) - 3:
            send(('TailRequest', forward_shuttle, operation, client, sequence_number, client_id,), to=config['tail'])
        else:                                                                                                                                                           
            send(('ForwardRequest', forward_shuttle, operation, client, sequence_number, client_id,), to=config['replica_' + str(my_index + 1)])


    # def receive(msg=('ResultShuttle', forward_shuttle, result, client, sequence_number, client_id,), from_=replica):
    #     output('Replica Intermediate:', replica_id, 'result shuttle received from previous replica :', forward_shuttle)
    #     my_index = int(replica_id.split('_')[1])

    #     #cache result and result shuttle
    #     cache_result(forward_shuttle, result, client, sequence_number, client_id)

    #     #send result shuttle to head
    #     if my_index == 1:
    #         send(('ResultShuttle', forward_shuttle, result), to=config['head'])
    #     else:
    #         #send result shuttle to the previous replica
    #         send(('ResultShuttle', forward_shuttle, result), to=config['replica_' + str(my_index - 1)])


    #Tail Replica
    def receive(msg=('TailRequest', forward_shuttle, operation, client, sequence_number, client_id,), from_=replica):
        output('Replica Tail: shuttle received in tail replica :', forward_shuttle)

        #Check for failure trigger condition
        replica_id = 'replica_' + str(len(config) - 1)
        failure_error = handle_failure_trigger(replica_id, client_id, sequence_number, failure_scenario_properties,'forwarded_request')
        output("failure_error :", failure_error)
        if failure_error:
            failure_error_dict = handle_failure_error(failure_error)
 

        # add order statement to the order proof in the shuttle
        # 3rd arg here is len(configuration) instead of 'tail', b/c we loop
        # on that arg in the called method
        add_order_statement(forward_shuttle, operation, len(config) - 2)
        output('Replica:', replica_id, 'orderCommand transition')
        output('Replica:', replica_id, 'added order statement to shuttle.(', slot_number, ', ', operation, ') is persistent')

        #applying operation to running state and add result statement to the result shuttle
        result = operations.perform_operation(operation, dictionary)
        output('State of dictionary at Tail:', dictionary)
        add_result_statement(forward_shuttle, operation, result, sign.generate_hash(result.encode('ascii')))

        #the order proof is complete, send result to client
        send(('Result', forward_shuttle.result_proof, result,str(client_id) + str(sequence_number), operation), to=client)
        output("Tail Replica: sent reply to client", client)

        #cache result and result shuttle
        cache_result(forward_shuttle, result, client, sequence_number, client_id)

        #send the shuttle in the reverse direction
        send(('ResultShuttle', forward_shuttle, result, client, sequence_number, client_id,), to=config['replica_' + str(len(config) - 2)])


def main():
    output("In replica main")
